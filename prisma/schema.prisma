generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  Admin
  User
}

model User {
  id         Int             @id @default(autoincrement())
  email      String          @unique @db.VarChar(255)
  password   String
  name       String          @db.VarChar(30)
  bannedTime DateTime?       @map("banned_time")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @default(now()) @updatedAt @map("updated_at")
  roles      Role[]
  characters UserCharacter[]

  @@map(name: "tb_user")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      RoleEnum @default(User)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_user_role")
}

model Character {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(255)
  description   String?
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  UserCharacter UserCharacter[]

  @@map(name: "tb_character")
}

model UserCharacter {
  id           Int                 @id @default(autoincrement())
  name         String              @unique @db.VarChar(255)
  level        Int                 @default(1)
  strength     Int                 @default(1)
  intelligence Int                 @default(1)
  dexterity    Int                 @default(1)
  point        Int                 @default(10)
  spentPoint   Int?
  User         User                @relation(fields: [userId], references: [id])
  userId       Int                 @map("user_id")
  character    Character           @relation(fields: [characterId], references: [id])
  characterId  Int                 @map("character_id")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @default(now()) @updatedAt @map("updated_at")
  items        UserCharacterItem[]

  @@map(name: "tb_user_character")
}

model Item {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  description       String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at")
  UserCharacterItem UserCharacterItem[]

  @@map(name: "tb_item")
}

model UserCharacterItem {
  id              Int           @id @default(autoincrement())
  equpped         Boolean?
  UserCharacter   UserCharacter @relation(fields: [userCharacterId], references: [id])
  userCharacterId Int           @map("user_character_id")
  item            Item          @relation(fields: [itemId], references: [id])
  itemId          Int           @map("item_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_user_character_item")
}
