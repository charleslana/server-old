generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  admin
  user
}

enum RoleGroupEnum {
  leader
  master
  member
}

enum CharacterClassEnum {
  warrior
  blader
  wizard
  forcearcher
  forceshielder
  forceblader
  gladiator
  forcegunner
  darkmage
}

enum GenderEnum {
  male
  female
}

enum ItemTypeEnum {
  equipment
  consumable
  other
}

enum ItemEquipmentTypeEnum {
  glove
  shoe
  head
  chest
  weapon
  ring
  necklace
  earring
}

enum ItemConsumableTypeEnum {
  hp
  mp
  stamina
  enhancement
}

enum RarityEnum {
  mythical
  legendary
  epic
  rare
  normal
  common
}

model User {
  id         Int             @id @default(autoincrement())
  email      String          @unique @db.VarChar(255)
  password   String
  name       String          @db.VarChar(30)
  diamond    Int             @default(0)
  bannedTime DateTime?       @map("banned_time")
  authToken  String?         @map("auth_token")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @default(now()) @updatedAt @map("updated_at")
  roles      Role[]
  characters UserCharacter[]

  @@map(name: "tb_user")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      RoleEnum @default(user)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_user_role")
}

model Character {
  id             Int                @id @default(autoincrement())
  name           String             @unique @db.VarChar(255)
  description    String?
  characterClass CharacterClassEnum @map("character_class")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @default(now()) @updatedAt @map("updated_at")
  userCharacters UserCharacter[]

  @@map(name: "tb_character")
}

model UserCharacter {
  id               Int                  @id @default(autoincrement())
  name             String               @unique @db.VarChar(20)
  level            Int                  @default(1)
  strength         Int                  @default(1)
  intelligence     Int                  @default(1)
  dexterity        Int                  @default(1)
  point            Int                  @default(10)
  spentPoint       Int?
  gold             Int                  @default(100)
  experience       Int                  @default(0)
  gender           GenderEnum
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int                  @map("user_id")
  character        Character            @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId      Int                  @map("character_id")
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @default(now()) @updatedAt @map("updated_at")
  items            UserCharacterItem[]
  skills           UserCharacterSkill[]
  groupMember      UserCharacterGroup?
  groupInvitations GroupInvitation[]
  senderMessages   Message[]            @relation(name: "sender")
  receiverMessages Message[]            @relation(name: "receiver")

  @@map(name: "tb_user_character")
}

model Item {
  id                 Int                     @id @default(autoincrement())
  name               String                  @db.VarChar(255)
  description        String?
  rarity             RarityEnum              @default(common)
  type               ItemTypeEnum
  equipmentType      ItemEquipmentTypeEnum?  @map("equipment_type")
  consumableType     ItemConsumableTypeEnum? @map("consumable_type")
  createdAt          DateTime                @default(now()) @map("created_at")
  updatedAt          DateTime                @default(now()) @updatedAt @map("updated_at")
  userCharacterItems UserCharacterItem[]
  messageItems       MessageItem[]

  @@map(name: "tb_item")
}

model UserCharacterItem {
  id              Int           @id @default(autoincrement())
  equipped        Boolean?
  enhancement     Int?
  userCharacter   UserCharacter @relation(fields: [userCharacterId], references: [id], onDelete: Cascade)
  userCharacterId Int           @map("user_character_id")
  item            Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId          Int           @map("item_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_user_character_item")
}

model Skill {
  id                  Int                  @id @default(autoincrement())
  name                String               @db.VarChar(255)
  description         String?
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at")
  userCharacterSkills UserCharacterSkill[]

  @@map(name: "tb_skill")
}

model UserCharacterSkill {
  id              Int           @id @default(autoincrement())
  level           Int           @default(1)
  userCharacter   UserCharacter @relation(fields: [userCharacterId], references: [id], onDelete: Cascade)
  userCharacterId Int           @map("user_character_id")
  skill           Skill         @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId         Int           @map("skill_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_user_character_skill")
}

model Group {
  id                  Int                  @id @default(autoincrement())
  name                String               @db.VarChar(20)
  description         String?              @db.VarChar(255)
  level               Int                  @default(1)
  experience          Int                  @default(0)
  image               String?
  requiredLevel       Int?
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at")
  userCharacterGroups UserCharacterGroup[]
  invitations         GroupInvitation[]

  @@map(name: "tb_group")
}

model UserCharacterGroup {
  id              Int           @id @default(autoincrement())
  point           Int?
  role            RoleGroupEnum @default(member)
  userCharacter   UserCharacter @relation(fields: [userCharacterId], references: [id], onDelete: Cascade)
  userCharacterId Int           @unique @map("user_character_id")
  group           Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         Int           @map("group_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_user_character_group")
}

model GroupInvitation {
  id              Int           @id @default(autoincrement())
  userCharacter   UserCharacter @relation(fields: [userCharacterId], references: [id], onDelete: Cascade)
  userCharacterId Int           @map("user_character_id")
  group           Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         Int           @map("group_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@unique([userCharacterId, groupId], name: "unique_user_character_group_invitation")
  @@map(name: "tb_group_invitation")
}

model Message {
  id                  Int            @id @default(autoincrement())
  title               String         @db.VarChar(255)
  description         String         @db.VarChar(1000)
  sender              UserCharacter? @relation(name: "sender", fields: [senderCharacterId], references: [id], onDelete: Cascade)
  senderCharacterId   Int?           @map("sender_character_id")
  receiver            UserCharacter  @relation(name: "receiver", fields: [receiverCharacterId], references: [id], onDelete: Cascade)
  receiverCharacterId Int            @map("receiver_character_id")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @default(now()) @updatedAt @map("updated_at")
  items               MessageItem[]

  @@map(name: "tb_message")
}

model MessageItem {
  id        Int      @id @default(autoincrement())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId Int      @map("message_id")
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int      @map("item_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_message_item")
}
